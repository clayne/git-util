#!/usr/bin/env python3

from argparse import ArgumentParser
import os
from pathlib import Path
import subprocess
import sys

# fdfb1b37af410cf5d7553bfb9c47d9d6f24d58d0	refs/pull/10868/head
# a915d8672599775199931f7b75589035fcb07eea	refs/pull/10868/merge

def parser():
    p = ArgumentParser()
    p.add_argument("pr_number", metavar=
    "PR-number", help="Number of the PR you want to fetch", type=int)
    p.add_argument("--remote", default="origin", help="name of the remote")
    p.add_argument("--delete", "-D", action="store_true", help="delete the PR branches and worktrees")
    p.add_argument("--force", "-f", action="store_true", help="--delete worktrees even if they have modified files")
    p.add_argument('--base-branch', '-M', default="main", help="Name of branch against which the pr is based")
    return p

def git(*args, check=True, dest=None):
    args = ["git"] + list(args)
    res = subprocess.run(args, check=check, stdout=subprocess.PIPE, text=True)
    text = res.stdout.rstrip()
    if dest is not None:
        with open(dest, "w") as fh:
            print(text, file=fh)
    return text

if __name__ == '__main__':
    args = parser().parse_args()
    pr = args.pr_number
    remote_ref = f"pull/{pr}/head"
    local_ref = f"pr/{pr}"
    base_ref = f"pr/{pr}-base"
    work_dir = tmp() / f"pr{pr}"
    diff_file = work_dir / f"DIFF-{pr}"
    files_file = work_dir / f"FILES-{pr}"
    commits_file = work_dir / f"COMMITS-{pr}"

    if args.delete:
        for f in diff_file, files_file, commits_file:
            try:
                os.remove(f)
            except FileNotFoundError:
                pass
        if work_dir.exists():
          # Force will destroy the worktree even if it contains modified files
          force = ["--force"] if args.force else []
          git("worktree", "remove", *force, work_dir)
        # check=False here is because the command will fail if some
        # of the refs don't exist.  But it will delete the others anyway.
        git("branch", "-D", local_ref, base_ref, check=False)
        exit(0)

    git("fetch", args.remote, f"{remote_ref}:{local_ref}", args.base_branch)
    # do we need --set-upstream-to?
    merge_base = git("merge-base", local_ref, f"{args.remote}/{args.base_branch}")
    git("branch", "--force", base_ref, merge_base)

    git("worktree", "add", work_dir, local_ref)

    git("diff", "-b", "--diff-filter=d", merge_base, local_ref, dest=diff_file)
    git("diff", "-b", "--name-only", "--diff-filter=d", f"{merge_base}..{local_ref}", dest=files_file)
    log = git("log", "--oneline", f"{merge_base}..{local_ref}", dest=commits_file)
    print(log, file=sys.stderr)
